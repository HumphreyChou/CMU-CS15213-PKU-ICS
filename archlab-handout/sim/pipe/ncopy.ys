#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name: 周裕涵(Humprey Chou) ID: 1900012455
# Describe how and why you modified the baseline code.

##################################################################
# 			Modification 1: 8 * 8 循环展开						  
# Loop1 - Loop8 分别进行 *(src + i) -> *(dst + i), 0 <= i < 8     
# 为避免访存依赖，将读取数据与储存数据错开，Loopi 读取 *(src + i)        
# 并存储 *(src + i - 1)
# 			Modification 2: 处理剩余数组元素
# 对于剩下 0 - 7 个元素，可以分别处理，采用三叉树确定究竟剩下几个元素
# 						 Root
#                      /  |   \
#                     <3  3   >3
#                    / | \   / | \  
#                   0  1  2 <6 6  7
#                           / \
#                          4   5
# 标签 Nodei_j 表示 剩下 i 个元素的第 j 个处理阶段，j == 0, 1
# 两个阶段将读内存和写内存错开，避免访存依赖
##################################################################
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
	# Loop header
	# xorq %rax, %rax       # not needed
	iaddq $-8,%rdx			# len < 8 ?
	jl Root			

Loop1:	
	mrmovq (%rdi), %r10	
	mrmovq 8(%rdi), %r11	
	rmmovq %r10, (%rsi)	
	andq %r10, %r10		
	jle Loop2		
	iaddq $0x1, %rax	
Loop2:	
	mrmovq 16(%rdi), %r10	
	rmmovq %r11, 8(%rsi)	
	andq %r11, %r11		
	jle Loop3	
	iaddq $0x1, %rax		
Loop3:	
	mrmovq 24(%rdi), %r11	
	rmmovq %r10, 16(%rsi)	
	andq %r10, %r10		
	jle Loop4		
	iaddq $0x1, %rax
Loop4:	
	mrmovq 32(%rdi), %r10	
	rmmovq %r11, 24(%rsi)	
	andq %r11, %r11		
	jle Loop5		
	iaddq $0x1, %rax		
Loop5:	
	mrmovq 40(%rdi), %r11	
	rmmovq %r10, 32(%rsi)	
	andq %r10, %r10		
	jle Loop6		
	iaddq $0x1, %rax		
Loop6:	
	mrmovq 48(%rdi), %r10	
	rmmovq %r11, 40(%rsi)	
	andq %r11, %r11		
	jle Loop7	
	iaddq $0x1, %rax		
Loop7:	
	mrmovq 56(%rdi), %r11	
	rmmovq %r10, 48(%rsi)	
	andq %r10, %r10		
	jle Loop8		
	iaddq $0x1, %rax		
Loop8:
	rmmovq %r11, 56(%rsi)	
	andq %r11, %r11		
	jle Loop		
	iaddq $0x1, %rax		

Loop:
	iaddq $64, %rdi	
	iaddq $64, %rsi	
	iaddq $-8,%rdx		
	jge Loop1	

Root:
	iaddq	$5,%rdx			# len - 8 + 5 == 0 -> len == 3
	jl	Left				# len < 3
	jg	Right	            # len > 3
	je	Node3_1				# len == 3
Left:
	iaddq	$2,%rdx			# len == 1
	je	Node1_1
	iaddq	$-1,%rdx		# len == 2
	je	Node2_1 
	jmp Done				# len == 0
Right:
	iaddq	$-3,%rdx		# len -8 + 5 - 3 == 0 -> len == 6
	jg	Node7_1				# len == 7
	je	Node6_1				# len == 6
	iaddq	$1,%rdx			
	je	Node5_1				# len == 5
	jmp	Node4_1				# len == 4

Node7_1:
	mrmovq 48(%rdi), %r11	
	rmmovq %r11, 48(%rsi)
	andq %r11, %r11		
Node6_1:
	mrmovq 40(%rdi), %r11	
	jle Node6_2		
	iaddq $0x1, %rax		
Node6_2:
	rmmovq %r11, 40(%rsi)
	andq %r11, %r11		
Node5_1:
	mrmovq 32(%rdi), %r11	
	jle Node5_2		
	iaddq $0x1, %rax		
Node5_2:		
	rmmovq %r11, 32(%rsi)
	andq %r11, %r11		
Node4_1:
	mrmovq 24(%rdi), %r11	
	jle Node4_2	
	iaddq $0x1, %rax		
Node4_2:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		
Node3_1:
	mrmovq 16(%rdi), %r11	
	jle Node3_2		
	iaddq $0x1, %rax		
Node3_2:
	rmmovq %r11, 16(%rsi)
	andq %r11, %r11	
Node2_1:
	mrmovq 8(%rdi), %r11	
	jle Node2_2		
	iaddq $0x1, %rax		
Node2_2:
	rmmovq %r11, 8(%rsi)
	andq %r11, %r11		
Node1_1:
	mrmovq (%rdi), %r11	
	jle Node1_2	
	iaddq $0x1, %rax		
Node1_2:	
	rmmovq %r11, (%rsi)
	andq %r11, %r11		
	jle Done		
	iaddq $0x1, %rax		
##################################################################
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
